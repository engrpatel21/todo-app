{"version":3,"sources":["components/NavBar.jsx","pages/HomePage/HomePage.jsx","components/TodoCard.jsx","pages/Todo/Todo.jsx","pages/AddTodo/AddTodo.jsx","services/todoService.js","pages/App/App.js","serviceWorker.js","index.js"],"names":["NavBar","state","activeItem","handleItemClick","e","name","setState","this","Segment","inverted","Menu","pointing","secondary","Item","as","Link","to","active","onClick","Component","HomePage","Container","text","Header","style","textAlign","TodoCard","isEdit","formData","props","todo","handleChange","target","value","handleSubmit","preventDefault","renderEdit","handleUpdate","formRef","React","createRef","handleDelete","Grid","Column","width","Card","marginBottom","height","Content","fontSize","zIndex","padding","Form","ref","onSubmit","Input","onChange","Description","TextArea","description","rows","extra","Popup","content","trigger","Button","icon","floated","basic","color","size","wordWrap","_id","Todo","todos","handleDeleteTodo","handleUpdateTodo","columns","divided","Row","margin","map","idx","key","AddTodo","invalidForm","handleAddTodo","length","verticalAlign","centered","placeholder","positive","disabled","create","fetch","method","headers","body","JSON","stringify","then","res","json","deleteTodo","id","update","App","newTodoData","a","console","log","todosApi","newTodo","history","push","filter","t","updatedTodoData","updatedTodo","newTodoArray","exact","path","render","refresh","refreshPage","location","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.41c721f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Segment, Menu} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\n\n\nclass NavBar extends Component {\n    state = { activeItem: 'home' }\n\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n  \n    render() {\n      const { activeItem } = this.state\n  \n      return (\n        <Segment inverted>\n          <Menu inverted pointing secondary>\n            <Menu.Item\n              as={Link}\n              to='/'\n              name='React CRUD guide'\n              active={activeItem === 'React CRUD guide'}\n              onClick={this.handleItemClick}\n            />\n            <Menu.Item\n              as={Link}\n              to='/todo'\n              name=\"todos\"\n              active={activeItem === 'todos'}\n              onClick={this.handleItemClick}\n            />\n            <Menu.Item\n              as={Link}\n              to='/addtodo'\n              name='add todo'\n              active={activeItem === 'add todo'}\n              onClick={this.handleItemClick}\n            />\n          </Menu>\n        </Segment>\n      )\n    }\n}\n \nexport default NavBar;","import React, { Component } from 'react';\nimport {Header, Container} from 'semantic-ui-react'\n\nclass HomePage extends Component {\n    state = {  }\n    render() { \n        return ( \n            <>\n            <Container text>\n    <Header as='h2'style={{textAlign: 'center'}} >How perform CRUD operations in React</Header>\n    <p>\n      This simple todo app demonstrates the very basics of a full stack application in React. CRUD is an acronym that stands for create, read, update, and delete operations on a backend database. \n    </p>\n    <p>\n    This little guide will cover the steps it took to create this Todo app in the MERN stack. MERN is another acronym that describes the technology stack that was used to create the app. The technologies used were MongoDB, Express, Reach, and Node.js. Node was used to write the server and Express is the middleware that was used. MongoDB is our backend database and React is our front end. We will be performing CRUD on the front end in react to change data in our backend, MongoDB, through our Node.js server. \n    </p>\n    <p>\n        I started on a starter template that had all the basic server written up. It also had React with all dependencies installed. This app was written with Semantic UI so I manually installed those dependacies. From here i turned App.js into a stateful component so that I can hold my data in state from an api call to the backend. \n    </p>\n    <p>\n        From here I made a navbar component so that I that navigate between different pages. React-Router will be used to accomplish this. I set up my menu options and my paths. I import the componenet into App.js and I test them to make sure I can navigate between the pages. \n    </p>\n    <p>\n        The next thing I need is a form. I make another stateful component so that I can hold the data entered in the form in state so that it can be used inconjunction with an api call to create data. In this component I import form components from semantic ui. Our Todo model in the back end will have a name and description attribute, so my form will reflect this. The input fields will have an onChange attribute that will equal a function that will handle changes to the DOM. The form needs to have a ref attribute created through React.createRef() to accomplish. There will also need to be an onSubmit function that will take in the form data and send it to the database to be created.\n    </p>\n    <p>\n        Now that I have the UI element created I need to make sure I have the backend setup as the only thing that is setup is a default route. I need to create a route using express and make sure that my server is using that route. There will be 4 routes, one for each part of CRUD. The first route will be the create route which will be '/api/todos'. Once the route is created and being used by the server need create a modle using MongoDb. I connected my server in /config/database.js then proceed to make a modle. As mentioned the model will have name and description for the todo. Next will be a the controller. In the controller I create a function to create a document in MongoDb.\n    </p>\n    <p>\n        Once a route to the backend is complete to create data, I need to create a service. In the todoService.js file I make create function to make an api call to the backend route. Before this can happen I need to make sure that package.json has the proxy set to localhost:3001 which is the port where the server is running. \n    </p>\n    <p>\n        Once the api function is created and exported, I import this function in App.js where my data for the todo's will live. Since the form is in another component, I will need create a function that utilizes the api in App.js and pass it down to the form component as a prop. \n    </p>\n    <p>\n        In the form component I will use the function from App.js in the onSubmit function to create the data. Once verify that the data is showing up on the backend I work on the index function which is the read in CRUD. \n    </p>\n    <p>\n    I follow the same process over and make sure there is a route to the back and a function in the controller get all the data from the backend. Once those are created I will create service to the backend. Again back in App.js I will use componentDidMount to make the api call so that I can populate the data from the backend in state as soon as components load. \n    </p>\n    <p>\n        Once I verify that the data is coming through in state through chrome dev tools, I pass down the state as props to a component that will display all the data in a list. I also write backend routes to delete and update data, create those services, then create those functions ins App.js. \n    </p>\n    <p>\n        On the component that shows all the todos I create a button to delete the data. Since I am using map to get each todo in its own component, I can create a button to delete a single todo. Using the service and routes already created I test the functionality. \n    </p>\n    <p>\n        The edit fucntionality is handled simliarly. Adding a button to the individual component shows a form similar to one used to add the todo and a function handed down from App.js to edit the data. \n    </p>\n    <p>\n        With that full crud is implemented in this App and deployed to heroku.\n    </p>\n  </Container>\n            </>\n         );\n    }\n}\n \nexport default HomePage;","import React, {Component} from 'react';\nimport {Grid, Card, Button, Form, Popup} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\n\n\nclass TodoCard extends Component {\n    state = { \n        isEdit: false,\n        formData: this.props.todo\n     }\n\n    handleChange = e => {\n        const formData = {...this.state.formData,[e.target.name]: e.target.value}\n        this.setState({formData})\n    } \n\n    handleSubmit = e =>{\n        e.preventDefault()\n        this.renderEdit()\n        this.props.handleUpdate(this.state.formData)\n    }\n\n    renderEdit = () => {\n        this.setState({isEdit: !this.state.isEdit, formData: this.props.todo})\n    }\n    formRef = React.createRef()\n    render() { \n        const {isEdit, formData} = this.state\n        const {todo, handleDelete, handleUpdate} = this.props\n        return (  <>\n            { isEdit ?    \n            \n            <Grid.Column style={{width: 'auto'}}>\n             \n            <Card style={{marginBottom: '10px', width:'300px', height: 'auto'}}>\n            <Card.Content style={{fontSize: '1.2rem', height: 'auto', zIndex: '1000', padding:'1rem'}}>\n            <Form ref={this.formRef} onSubmit={this.handleSubmit}>\n                <Grid>\n                    <Grid.Column  width={16}>\n                        <Form.Input \n                        onChange={this.handleChange}\n                        value={this.state.formData.name} \n                        name='name'\n                        style={{height:'2.5rem', marginBottom: '1rem'}} />   \n                    </Grid.Column>\n                </Grid>\n            \n                <Card.Description style={{height: '220px', fontSize: '1.2rem'}}>\n                <Form.TextArea\n                    name='description'\n                    value={this.state.formData.description}\n                    onChange={this.handleChange}\n                    rows={9}\n                />\n                </Card.Description >\n                </Form>\n            </Card.Content>\n            <Card.Content extra>\n        \n            <Popup style={{}}content='Click here to confirm change' trigger={<Button  onClick={this.handleSubmit} icon='check' floated='left' basic color='green' size='small'/>} />\n            <Popup style={{}}content='Click here to cancel change' trigger={<Button onClick={this.renderEdit} icon='x' floated='right' basic color='red' size='small'/>} />\n            </Card.Content>\n            </Card>\n            \n            </Grid.Column>\n           \n            :   \n            <Grid.Column style={{width: 'auto'}}>\n        \n            <Card style={{marginBottom: '10px', width:'300px', height: 'auto'}}>\n            <Card.Content style={{fontSize: '1rem', height: 'auto', zIndex: '1000'}}>\n                <Card.Header style={{wordWrap: 'break-word'}}>\n                {todo.name} \n                \n                    \n                </Card.Header>\n                </Card.Content>\n            \n            <Card.Content style={{height: '250px', fontSize: '1.2rem'}}>\n                 \n            <Card.Description>{todo.description} </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n        \n            <Popup style={{}}content='Click here to confirm edit' trigger={<Button onClick={this.renderEdit} icon='edit' floated='left' basic color='blue' size='small'/>} />\n            <Popup style={{}}content='Click here to confirm delete' trigger={<Button onClick={()=>handleDelete(todo._id)} icon='x' floated='right' basic color='red' size='small'/>} />\n            </Card.Content>\n            </Card>\n          \n            </Grid.Column>\n                \n            \n            }\n            </> );\n    }\n}\n \nexport default TodoCard;\n\n\n","import React, { Component } from 'react';\nimport {Grid, Container} from 'semantic-ui-react'\nimport TodoCard from '../../components/TodoCard'\n\n\nclass Todo extends Component {\n    state = {  }\n    render() { \n        const {todos, handleDeleteTodo, handleUpdateTodo} = this.props\n        return ( \n        <>\n         <Grid  columns='equal' divided>\n            <Grid.Row style={{margin: '0px 30px'}}>\n            <Grid.Column>\n                <Container textAlign='center' style={{fontSize:'3rem', height: '3rem'}}>Todos</Container>\n                <Grid >\n                <Grid.Row style={{margin: '0 30px'}}> \n                {todos.map((todo,idx) =>\n                \n                    <TodoCard todo={todo} handleDelete={handleDeleteTodo} handleUpdate={handleUpdateTodo} key={idx} />\n                )}\n           \n                </Grid.Row>\n                </Grid>\n            </Grid.Column>\n           \n            </Grid.Row>\n        </Grid>\n        </> );\n    }\n}\n \nexport default Todo;","import React, { Component } from 'react';\nimport {Grid, Form} from 'semantic-ui-react'\n\nclass AddTodo extends Component {\n    state = { \n        invalidForm: true,\n        formData: {\n            name: '',\n            description: ''\n        }\n     }\n\n\n     handleSubmit = e => {\n        e.preventDefault();\n        \n        this.props.handleAddTodo(this.state.formData)\n    }\n\n    handleChange = e => {\n        const formData = {...this.state.formData, [e.target.name]: e.target.value};\n        this.setState({\n          formData,\n          invalidForm: formData.name.length && formData.description.length ? false : true\n        });\n      };\n    \n    formRef = React.createRef()\n    render() { \n        return ( \n\n            <>\n              <>\n              <Grid verticalAlign='middle' columns={4} centered>\n                    <Grid.Row>\n                    <Grid.Column>\n                    <h1 style={{textAlign: 'center'}}>Add Todo</h1>\n                            <Form ref={this.formRef} onSubmit={this.handleSubmit}>\n                                <Form.Input\n                                    placeholder='Name'\n                                    value={this.state.formData.name}\n                                    name='name'\n                                    onChange={this.handleChange}\n                                />\n\n                                \n                                <Form.TextArea \n                                    placeholder='Description'\n                                    value={this.state.formData.description}\n                                    name='description'\n                                    onChange={this.handleChange}\n                                    rows={5}\n                                />\n                                <div style={{ textAlign: 'center'}}>\n                                    <Form.Button style={{margin: '0 auto'}} content='Add Todo' positive disabled={this.state.invalidForm} />\n                                </div>\n                                \n                            </Form>\n\n                    </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            \n            \n            </>\n            </>\n\n         );\n    }\n}\n \nexport default AddTodo;","const BASE_URL = '/api/todos'\n\nexport function getAll(){\n    return fetch(BASE_URL)\n    .then(res => res.json())\n}\n\nexport function create(todo){\n    return fetch(BASE_URL, {\n        method: 'POST',\n        headers: {'content-type': 'application/json'},\n        body: JSON.stringify(todo)\n    })\n    .then(res=> res.json())\n}\n\nexport function deleteTodo(id){\n    return fetch(`${BASE_URL}/${id}`, {\n        method: 'DELETE'\n    })\n    .then(res => res.json())\n}\n\nexport function update(todo){\n    return fetch(`${BASE_URL}/${todo._id}`,{\n        method: 'PUT',\n        headers: {'content-type': 'application/json'},\n        body: JSON.stringify(todo)\n    })\n    .then(res => res.json())\n}","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom'\nimport './App.css';\nimport NavBar from '../../components/NavBar'\nimport HomePage from '../HomePage/HomePage'\nimport Todo from '../Todo/Todo'\nimport AddTodo from '../AddTodo/AddTodo'\nimport * as todosApi from '../../services/todoService'\nimport EditTodo from '../EditTodo/EditTodo'\n\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  async componentDidMount(){\n    const todos = await todosApi.getAll()\n    this.setState({todos})\n  }\n  handleAddTodo = async newTodoData => {\n    console.log('newtododata',newTodoData)\n    const newTodo = await todosApi.create(newTodoData)\n    console.log('newtodo', newTodo)\n    this.setState({todos: [...this.state.todos, newTodo]},\n        ()=> this.props.history.push('/todo'))\n  }\n\n  handleDeleteTodo = async id => {\n    await todosApi.deleteTodo(id);\n    this.setState({\n    todos: this.state.todos.filter(t => t._id !== id)},\n    () => this.props.history.push('/todo'))\n  }\n\n  handleUpdateTodo = async updatedTodoData => {\n    const updatedTodo = await todosApi.update(updatedTodoData)\n    const newTodoArray = this.state.todos.map(t => \n      t._id === updatedTodo._id ? updatedTodo: t)\n    this.setState({\n      todos: newTodoArray\n    }, () => this.props.history.push('/todo'))\n  }\n\n\n  render() {\n    return (\n      <>\n        <NavBar/>\n        <Route\n          exact path='/'\n          render={() => \n          <HomePage \n            todos={this.state.todos}\n            \n            refresh={this.refreshPage}\n          />\n        }/>\n        <Route\n          exact path='/addtodo'\n          render={() =>\n        <AddTodo handleAddTodo={this.handleAddTodo} />\n        }/>\n        <Route\n          exact path='/todo'\n          render={({location}) =>\n        <Todo\n          handleUpdateTodo={this.handleUpdateTodo}\n          handleDeleteTodo={this.handleDeleteTodo}\n          location={location}\n          todos={this.state.todos}\n         />\n        }/>\n        <Route\n          exact path='/edit'\n          render={({location}) =>\n        <EditTodo\n          handleUpdateTodo={this.handleUpdateTodo}\n          handleDeleteTodo={this.handleDeleteTodo}\n          location={location}\n          todos={this.state.todos}\n         />\n        }/>\n      </>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App/App';\nimport 'semantic-ui-css/semantic.min.css'\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <Route render={({history}) => <App history={history} />} />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}